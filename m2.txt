
# Things to document

* Description in front matter

===
[List]
youtube = { filename="youtube.html", id = "dQw4w9WgXcQ" }
===

{{"{{"}} scode .FrontMatter.List.youtube {{"}}"}} 


===
[List]
youtube = { filename="youtube.html", id = "dQw4w9WgXcQ" }
===

{{ scode .FrontMatter.List.youtube }} 


Mention this gives a "Video unavailable" error when not running a web server
===
[List]
youtube = { filename="youtube.html", id = "dQw4w9WgXcQ" }
===

{{ scode .FrontMatter.List.youtube }} 



{{ scode "y.html" }}
{{ scode "youtube.html" "tcrTQUVkUe0" }}

## Things I need to test
- Pub dir gets changed in configuration

Documentation conventions

The parts ofthe HTML page (header, footer, etc.) are called page regions
https://www.w3.org/WAI/tutorials/page-structure/regions/

# kitchensink {sitename}

The `kitchensink` command generates a test site that exercises many features of Metabuzz.
You can't change the contents of the site but you can choose its name. 

## Usage

Just use `kitchensink mysite` but replace `mysite` with the name of the site to generate:


```
:: Change mysite to any legal directory name
mb kitchensink mysite
```

## Tip: combine it with testsite

If you're doing a lot of testing and don't want to delete the old kitchensink site manually
every time, you can add a `testsite` entry to [metabuzz.toml](config-file.html#testsite)

# metabuzz.toml

## testsite

Normally when you create a new site and there's already one in that location, Metabuzz makes you delete the site mnually:

```
$ mb new site foo
Created site foo
$ mb new site foo
Site already exists: foo (error code mbz0951)
```

But suppose you have a test site you want to tear down and rebuild quickly without being blocked like that?
Add a `testsite` entry to `metabuzz.toml` like so, and Metabuzz will write over any site by that name, but
only that name:


#### file: metabuzz.toml
```
testsite="foobar" 
```

The same sequence would now look like this:
```
:: With great power comes great responsbility
$ mb new site foo
Created site foo
$ mb new site foo
:: nuked!
Created site foo
```


## Handling errors in the code 
### Using PREVIOUS

Normally "PREVIOUS" means an earlier call generated an error so
it should be propagated. Include as err.Error() in the second
parameter:

```
if err := App.writeSiteConfig(); err != nil {
  // Custom error message already generated
  return errCode("PREVIOUS", err.Error(), App.Site.configFile)
  return errCode("0902", App.Site.configFile, err.Error())
}
```


### Customizing

```
if err := Copy(source, target); err != nil {                                                                    
  return errCode("0111", "trying to copy "+source+" to "+target)                                                
}
```
### Including error messages from Go runtime calls

```
f, err := os.Create(filename)
if err != nil {
  return errCode("0210", err.Error(), filename)
}
```

## Application configuration data

Themes, shortcode files, and everything else not including the executable file are 
application configuration data.

### metabuzz.toml
On startup the first order of business is to find out where application configuration data is.
If there's a file named `metabuzz.toml` in the current directory, and if that file contains
a configdir entry, then that's where the application configuration data is supposed to be:

```
configdir="/Users/tom/code/m2"
```

Use absolute paths, not things expanded by the shell like `~`.

If there's no `metabuzz.toml` file then the application configuration


