
# Configuration
- First order of businesses is Metabuzz global configuration. That's where Metabuzz-global info comes from, and it affects every site created by Metabuzz. It's passed through command line flags, environment variables, and metabuzz.toml. Currenlty viper does that stuff. Application configuration data (themes, shortcodes, etc.) is normally located in the metabuzz/.mb subdirectory of the system-specific application directory (see docs for os.UserConfigDir()). But you may want it to be elsewhere. For example, it makes sense to use a work directory so Git will manage it. To change that, you need a metabuzz.toml file either in ~ or in the current directory.
- Second comes the Application object, which happens inside the site. Its initialization comes in initConfig(), which is called by Viper after processing the command line. intiConfig() in turn calls viper.ReadConfig().
- The Application object contains a Site object.Third to be initialized is the Site object, which reads a site configuration file in the site's .site/site.toml file. It's different for each site you create and has things like the site's name, branding, and so on.  

# Todo
- Ensure default theme in site.toml works. I don't think it does
- Enure naming config file on the command line works
# Adding a command

Example using new them:
$ mb new theme foo
$ mb new theme foo from wide

cmds.go
- function addCommands()
  - Near the top, jlk0Add cmdNew:
```
		/*****************************************************
		  TOP LEVEL COMMAND: new
		 *****************************************************/
		cmdNew = &cobra.Command{
			Use:   "new",
			Short: "new site or new theme",
			Long: `site: Use new site to start a new project. Use new theme to 
create theme based on an existing one. 

      Typical usage of new theme:

      mb new theme brochure

      : Edit theme files
      vim .mb/.themes/brochure/brochure.css
      vim .mb/.themes/brochure/theme-dark.css
      etc

`,
		}
```

  - Add subcommand:
```
		/*****************************************************
		    Subcommand: new site
		*****************************************************/

		cmdNewSite = &cobra.Command{
			Use:   "site {sitename}",
			Short: "new site mycoolsite",
			Long: `new site {sitename}

      Where {sitename} is a valid directory name. For example, if your site is calle basiclaptop.com, you would do this:

      mb new site basiclaptop
`,
			Run: func(cmd *cobra.Command, args []string) {
				// If there are arguments after build, then
				// just convert these files one at at time.
				if len(args) > 0 {
					App.Site.Name = args[0]
				} else {
					// Them more likely case: it's build all by
					// itself, so go through the whole directory
					// tree and build as a complete site.
					App.Site.Name = promptString("Name of site to create?")
				}
				err := App.newSite(App.Site.Name)
				if err != nil {
					App.QuitError(err)
				} else {
					fmt.Println("Created site ", App.Site.Name)
				}
			},
		}


```
  - Near the bottom,use AddCommand for the top level new:
```
	App.Cmd.AddCommand(cmdNew)
```

  - And add its subcommand
```
	cmdNew.AddCommand(cmdNewTheme)
```


# Things to document

* new site: Doesn't delete an existing directory. That lets you turn an existing directory into a site.
OTOH when you publish, any existing .pub directory is deleted 

* Description in front matter

===
[List]
youtube = { filename="youtube.html", id = "dQw4w9WgXcQ" }
===

{{"{{"}} scode .FrontMatter.List.youtube {{"}}"}} 


===
[List]
youtube = { filename="youtube.html", id = "dQw4w9WgXcQ" }
===

{{ scode .FrontMatter.List.youtube }} 


Mention this gives a "Video unavailable" error when not running a web server
===
[List]
youtube = { filename="youtube.html", id = "dQw4w9WgXcQ" }
===

{{ scode .FrontMatter.List.youtube }} 



{{ scode "y.html" }}
{{ scode "youtube.html" "tcrTQUVkUe0" }}

## Things I need to test
- Pub dir gets changed in configuration
- Copy new theme onto itself
- Copy nonexistent theme to a new one
- Copy a new theme to ""
- new site AND kitchensink

Documentation conventions

The parts ofthe HTML page (header, footer, etc.) are called page regions
https://www.w3.org/WAI/tutorials/page-structure/regions/

# kitchensink {sitename}

The `kitchensink` command generates a test site that exercises many features of Metabuzz.
You can't change the contents of the site but you can choose its name. 

## Usage

Just use `kitchensink mysite` but replace `mysite` with the name of the site to generate:


```
:: Change mysite to any legal directory name
mb kitchensink mysite
```

## Tip: combine it with testsite

If you're doing a lot of testing and don't want to delete the old kitchensink site manually
every time, you can add a `testsite` entry to [metabuzz.toml](config-file.html#testsite)

# metabuzz.toml

## testsite

Normally when you create a new site and there's already one in that location, Metabuzz makes you delete the site mnually:

```
$ mb new site foo
Created site foo
$ mb new site foo
Site already exists: foo (error code mbz0951)
```

But suppose you have a test site you want to tear down and rebuild quickly without being blocked like that?
Add a `testsite` entry to `metabuzz.toml` like so, and Metabuzz will write over any site by that name, but
only that name:


#### file: metabuzz.toml
```
testsite="foobar" 
```

The same sequence would now look like this:
```
:: With great power comes great responsbility
$ mb new site foo
Created site foo
$ mb new site foo
:: nuked!
Created site foo
```


## Handling errors in the code 
### Using PREVIOUS

Normally "PREVIOUS" means an earlier call generated an error so
it should be propagated. Include as err.Error() in the second
parameter:

```
if err := App.writeSiteConfig(); err != nil {
  // Custom error message already generated
  return errCode("PREVIOUS", err.Error(), App.Site.configFile)
  return errCode("0902", App.Site.configFile, err.Error())
}
```


### Customizing

```
if err := Copy(source, target); err != nil {                                                                    
  return errCode("0111", "trying to copy "+source+" to "+target)                                                
}
```
### Including error messages from Go runtime calls

```
f, err := os.Create(filename)
if err != nil {
  return errCode("0210", err.Error(), filename)
}
```

## Application configuration data

Themes, shortcode files, and everything else not including the executable file are 
application configuration data.

### metabuzz.toml
On startup the first order of business is to find out where application configuration data is.
If there's a file named `metabuzz.toml` in the current directory, and if that file contains
a configdir entry, then that's where the application configuration data is supposed to be:

```
configdir="/Users/tom/code/m2"
```

Use absolute paths, not things expanded by the shell like `~`.

If there's no `metabuzz.toml` file then the application configuration


